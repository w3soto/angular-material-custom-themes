@use 'sass:map';
@use '@angular/material' as theming;


@mixin _palette-variables($name, $palette) {
  @each $variant in (main, lighter, darker) {
    --#{$name}-#{$variant}-color:  #{map.get($palette, $variant)};
    --#{$name}-#{$variant}-text-color:  #{map.get(map.get($palette, contrast), $variant)};
  }
}


@mixin theme-variables($theme) {

  $config: theming.get-color-config($theme);
  $is-dark-theme: map.get($config, is-dark);

  $background: map.get($config, background);
  $foreground: map.get($config, foreground);
  $primary: map.get($config, primary);
  $accent: map.get($config, accent);
  $warn: map.get($config, warn);

  $custom-palettes: theming.get-color-config(map.get($theme, custom));

  // background
  --background-color: #{map.get($background, background)};
  --card-color: #{map.get($background, card)};
  --dialog-color: #{map.get($background, dialog)};
  --tooltip-color: #{map.get($background, tooltip)};
  --app-bar-color: #{map.get($background, app-bar)};
  --status-bar-color: #{map.get($background, status-bar)};
  --raised-button-color: #{map.get($background,raised-button)};
  --focused-button-color: #{map.get($background, focused-button)};
  --selected-button-color: #{map.get($background, selected-button)};
  --disabled-button-color: #{map.get($background, disabled-button)};

  // foreground
  --text-color: #{map.get($foreground, text)};
  --secondary-text-color: #{map.get($foreground, secondary-text)};
  --hint-text-color: #{map.get($foreground, hint-text)};
  --disabled-text-color: #{map.get($foreground, disabled)};
  --disabled-button-text-color: #{map.get($foreground, disabled-button)};
  --icon-text-color: #{map.get($foreground, icon)};
  --divider-color: #{map.get($foreground, divider)};

  // built-in colors
  @each $name, $palette in (primary: $primary, accent: $accent, warn: $warn) {
    @include _palette-variables($name, $palette);
  }

  // custom colors
  @each $name, $palette in $custom-palettes {
    @include _palette-variables($name, $palette);
  }

}


/*

  Generate text and background color classes from palette

 .text-NAME { ... }
 .text-NAME-lighter { ... }
 .text-NAME-darker { ... }

 .bg-NAME { ... }
 .bg-NAME-lighter { ... }
 .bg-NAME-darker { ... }

 */
@mixin _color_classes-from-palette($name, $palette) {

  @each $hue in (default, lighter, darker) {

    $suffix: -#{$hue};
    @if $hue == default {
      $suffix: '';
    }

    .text-#{$name}#{$suffix} {
      color: map.get($palette, $hue) !important;
    }

    .text-#{$name}#{$suffix}-contrast {
      $contrast: map.get($palette, contast);
      @if $contrast {
        color: map.get($contrast, $hue) !important;
      }
      @else if map.get($palette, #{$hue}-contrast) {
        color: map.get($palette, #{$hue}-contrast) !important;
      }
    }

    .bg-#{$name}#{$suffix} {
      background-color: map.get($palette, $hue) !important;
    }

  }

}


/*

  Generate text and background color classes from theme colors

  Example:
    .text-primary {}
    .bg-primary {}

 */
@mixin theme-color-classes($theme) {

  $config: theming.get-color-config($theme);

  $primary: map.get($config, primary);
  $accent: map.get($config, accent);
  $warn: map.get($config, warn);

  // mat colors
  @each $name, $palette in (primary: $primary, accent: $accent, warn: $warn) {
    @include _color_classes-from-palette($name, $palette);
  }

  $custom-palettes: theming.get-color-config(map.get($theme, custom));

  // custom colors
  @each $name, $palette in $custom-palettes {
    @include _color_classes-from-palette($name, $palette);
  }

  // foreground colors

  // background colors
}

