@use 'sass:map';
@use 'sass:meta';
@use 'sass:color';
@use '@angular/material' as theming;


@function _get-buffer-color($theme, $background) {
  $theme-color: theming.get-color-from-palette($theme);
  // Return fallback color if the theme uses variables to define colors.
  @if (meta.type-of($theme-color) != 'color' or meta.type-of($background) != 'color') {
    @return theming.get-color-from-palette($theme, lighter);
  }
  @return color.mix($theme-color, $background, $weight: 25%);
}


@mixin color($theme) {

  $custom-config: map.get($theme, custom);
  $custom-colors: map.get($custom-config, colors);

  $palettes: theming.get-color-config($custom-colors);

  $background: map.get(map.get($theme, background), background);

  .mat-progress-bar {

    @each $key, $palette in $palettes {
      &[color=#{$key}],
      &.mat-#{$key} {
        .mat-progress-bar-background {
          fill: _get-buffer-color($palette, $background);
        }
        .mat-progress-bar-buffer {
          background-color: _get-buffer-color($palette, $background);
        }
        .mat-progress-bar-fill::after {
          background-color: theming.get-color-from-palette($palette);
        }
      }
    }
  }

}

@mixin theme($theme) {
  @include color($theme);
}
